#!/usr/bin/env node
'use strict'
var fs = require('fs');
var path = require('path');
var cleancss = require('clean-css');
var jsmin = require('jsmin2');
var jsugly = require('uglify-js');
var colors = require('colors');
var projConf = require('../package.json');

//colors
//bold italic underline inverse 
//yellow cyan white magenta green
//red grey blue rainbow zebra random

//cmd
//incre 显示帮助信息
//incre init 在当前路径下创建".incre"目录，存放临时文件和配置文件(increfile.js)
//incre build 根据配置文件(increfile.js)生成增量文件，打印增量信息
//incre upload 上传增量文件
//incre compare -f1 -f2 比较文件f1与文件f2生成增量文件
//
//build之前需要jsmin，再和线上的文件对比。jsuglify可能会影响增量文件的计算
//upload过程提供接口供用户自己实现
//build模版时，需要处理模版依赖的样式文件（为单独文件，不写在模板html中）
var incre = module.exports = require('../index.js');

function initConfig(){
  var base = './';
  incre.fs.mkdir('.incre', base);
  incre.fs.mkdir('upload', base + '.incre');//待上传的文件临时目录
  incre.fs.mkdir('tmpl', base + '.incre');//存放模板的目录
  incre.fs.mkdir('md2html', base + '.incre');//markdown文件转成html文件之后，存放的目录

  var file = 'increfile.js';
  var defaultConfig = fs.createReadStream(path.join(incre.root, 'sample/'+file));
  var targetConfig = fs.createWriteStream(path.join('./.incre/', file));
  defaultConfig.pipe(targetConfig, {
    flags : 'w',
    encoding : 'utf-8',
    mode : '755'
  });
}

function checkConfig(){
  var commandDir = path.resolve('./').split(path.sep);
  var curDir;
  while(commandDir.length > 1){//从当前目录向上寻找incre配置目录
    curDir = path.join(commandDir.join(path.sep), '/.incre');
    if(fs.existsSync(curDir)){
      return curDir;
    }
    commandDir.pop();
  }
  return false;
}

//文件名:文件路径map
function getFilePathMap(){
  var filePathMap = {};
  incre.gear._.each(incre.config.src, function(v, k){
    var fileInfo = k.split('/');
    var fileName = fileInfo[fileInfo.length - 1];
    var filePath = k.replace(fileName, '');
    filePathMap[fileName] = filePath;
  });
  return filePathMap;
}

function addZero(v){
  v = v.toString();
  if(v.length == 1){
    v = '0' + v;
  }
  return v;
}

function printLogInfo(logInfo){
  console.log('');
  console.log('  incre file list:'.green);
  console.log('  file\t\ttotal\t\tsaving'.cyan);
  incre.gear._.each(logInfo, function(v, k){
    if(v.status == 'ok'){
      console.log(('  ' + k + '\t\t' + v.total + '\t\t' + v.saving).grey);
    }
    else if(v.status == 'error'){
      console.log(('  ' + k + '\t\tfail to generate incre file').red);
    }
  });
  console.log('');
}

//compare
//工具类，快速计算两个文件的增量部分
function getincre(newfile, oldfile){
  var uploadDir = incre.config.base + '.incre/upload/';
  var newfileInfo = newfile.split('/');
  var oldfileInfo = oldfile.split('/');
  var increfileName = oldfileInfo[oldfileInfo.length - 1].replace('.js', '_') + newfileInfo[newfileInfo.length - 1];
  var increfile = uploadDir + increfileName;
  incre.fs.readFile(newfile).done(function(data){
    var newcode = data;

    incre.fs.readFile(oldfile).done(function(data1){
      var oldcode = data1;

      var increObj = incre.makeincre(oldcode, newcode, incre.config.chunk || 20);
      increObj.saving = newcode.length - JSON.stringify(increObj).length;//节省请求的字符数
      increObj.total = newcode.length;//全量字符数
      var increcode = 'increCallback_' + parseInt( new Date().getTime()) + '=' + JSON.stringify(increObj);

      fs.writeFile(increfile, increcode, function(err){
        if(err){
          console.log(('  Error : write incre file ' + increfileName + 'failed!').red);
        }
        else{
          console.log('  Info : write incre file ' + increfileName + ' success.');
        }
      });
    }, function(err){
      console.log(('  Error : ' + err).red);
    });
    
  });
}

function merge(){
  var res = {};
  var defer = incre.gear.q.defer();

  var keys = incre.gear._.keys(incre.config.merge);
  function get(){
    var key = keys.shift();
    if(!key){
      defer.resolve(res);
    }
    else{
      var val = incre.config.merge[key];
      val = incre.gear._.map(val, function(item){
        return incre.config.base + item;
      });

      incre.fs.readFiles(val).done(function(datas){
        res[key] = datas;
        get();
      }, function(err){
        defer.reject(err);
      });  
    }
  }

  get();

  return defer.promise;
}

var Template = (function(){
  var tmplDir = '';

  /**
   * 读取incre.config.template[key]中的模板，然后build，最后写入文件中
   * @param  {array} tmplsKeys 模板对象中的key
   * @param  {object} tmpls     模板对象
   * @param  {string} tmplRoot  模板源文件目录
   * @param  {string} tmplKey       模板项目名
   * @return {[type]}           [description]
   */
  function action(tmplsKeys, tmpls, tmplRoot, tmplKey){
     var defer = incre.gear.q.defer();

     function exec(){
      var key = tmplsKeys.shift();
      if(!key){
        defer.resolve(true);
      }
      else{
        var val = tmplRoot + tmpls[key];
        incre.fs.readFile(val).done(function(data){
          var code = '', file = '';
          if(val.indexOf('.css') != -1){//css文件
            code = ["define('css/", key, "','", new cleancss().minify(data) , "');"].join('');
            file = tmplDir + tmplKey + '/' + key + '.css.js';
          }
          else{//html文件
            code = ["define('tmpl/", key, "','", incre.htmlmin(data) , "');"].join('');
            file = tmplDir + tmplKey + '/' + key + '.js';
          }
          incre.fs.writeFile(file, code, function(err){
            if(err){
              console.log(('  Error : write incre file ' + file + 'failed!').red);
            }
            else{
              console.log('  Info : write incre file ' + file + ' success.');
            }
          }, incre.config.base);

          exec();
        }, function(err){
          defer.reject(err);
        });
      }
     }

     exec();

     return defer.promise;
  }

  function build(){
    var root = incre.config.base + incre.config.template.root;
    delete incre.config.template.root;

    var keys = incre.gear._.keys(incre.config.template);

    tmplDir = incre.config.base + '.incre/tmpl/';

    function exec(){
      var key = keys.shift();
      if(!key){
        return;
      }
      else{
        var tmplRoot = root + key + '/';
        var tmpls = incre.config.template[key];
        var tmplsKeys = incre.gear._.keys(tmpls);

        action(tmplsKeys, tmpls, tmplRoot, key).done(function(res){
          if(res){
            exec();
          }
        });
      }
    }

    exec();
  }

  function isenable(){
    return incre.config.template && incre.config.template.root;
  }

  return {
    build : build,
    isenable : isenable
  };
}());

//build process
function build(){
  var d = new Date();
  var ver = d.getFullYear().toString().slice(2) + addZero(d.getMonth() + 1) + addZero(d.getDate());
  var uploadDir = incre.config.base + '.incre/upload/';
  var logInfo = incre.gear.listen.add({}, function(logs){
    if(incre.gear.jsonsize(logs) == incre.gear.jsonsize(incre.config.src)){
      printLogInfo(logs);
    }
  });
  clear();

  merge().done(function(mergeCodes){
    //build js/css
    incre.gear._.each(incre.config.src, function(v, k){//@todo 这里each(同步)和readFile(异步)之间可能有问题
      var newfile = incre.config.base + k;
      (function(newfile, v, k){
        incre.fs.readFile(newfile, true).done(function(data){
          var newcode = '';
          if(data){//区分js和css
            if(newfile.indexOf('.js') != -1){
              newcode = jsmin(data).code;//jsmin
              newcode = jsugly.minify(newcode, {fromString:true}).code;//jsugly
            }
            else if(newfile.indexOf('.css') != -1){
              newcode = new cleancss().minify(data);
            }
          }
          else{
            if(mergeCodes[k] && mergeCodes[k].length > 0){//合并文件
              newcode = mergeCodes[k].join('\n');
              newcode = jsmin(newcode).code;//jsmin
              newcode = jsugly.minify(newcode, {fromString:true}).code;//jsugly
            }
          }
          
          //写全量文件
          var newfileInfo = newfile.split('/');
          var newfileName = (v == '-' ? newfileInfo[newfileInfo.length - 1] : newfileInfo[newfileInfo.length - 1].replace(/(\.(js|css))$/, '_' + ver + '$1'));
          var tmpfile = uploadDir + newfileName;

          fs.writeFile(tmpfile, newcode, function(err){
            if(err){
              console.log(('  Error : write file ' + newfileName + ' failed!').red);
            }
            else{
              console.log('  Info : write file ' + newfileName + ' success.');
            }
          });

          if(v.trim() != '' && v.trim() != '-'){//全量版本号存在时， ""和"-"的含义请查看sample/increfile.js
            //计算增量文件
            var cdnfile = incre.config.cdnpath + k.replace('.js', '_' + v + '.js');
            var jsKey = k.replace('.js', '');
            var logObj = {};
            incre.fs.readFile(cdnfile).done(function(data1){
              var oldcode = data1;

              var increObj = incre.makeincre(oldcode, newcode, incre.config.chunk || 20);
              increObj.saving = newcode.length - JSON.stringify(increObj).length;//节省请求的字符数
              increObj.total = newcode.length;//全量字符数
              var increcode = 'increCallback_' + jsKey.replace(/\//g, '_') + '=' + JSON.stringify(increObj);

              //写增量文件
              var increfileName = newfileInfo[newfileInfo.length - 1].replace('.js', '_' + v + '_$.js');
              var increfile = uploadDir + increfileName;

              fs.writeFile(increfile, increcode, function(err){
                if(err){
                  logObj[jsKey] = {
                    status : 'error'
                  };
                  incre.gear.listen.set(logInfo, logObj);
                  console.log(('  Error : write incre file ' + increfileName + 'failed!').red);
                }
                else{
                  logObj[jsKey] = {
                    status : 'ok',
                    total : increObj.total,
                    saving : increObj.saving
                  };
                  incre.gear.listen.set(logInfo, logObj);
                  console.log('  Info : write incre file ' + increfileName + ' success.');
                }
              });
            }, function(err){
              console.log(('  Error : ' + err).red);
              logObj[jsKey] = {
                status : 'error'
              }
              incre.gear.listen.set(logInfo, logObj);
            });
          }
        });
      }(newfile, v, k));
    });

    //build template
    if(Template.isenable()){
      Template.build();
    }
  });

  console.log('  Info : start building js, css and template'.green);
}

//upload process
function upload(){
  if(!incre.uploadFun){
    console.log('  Warning : you do not implement "post" function to communicate with your upload cgi.You can check this link https://github.com/aslinwang/increjs/issues/1'.yellow);
    return;
  }
  var uploadDir = incre.config.base + '.incre/upload/';
  console.log('  Info : start uploading'.green);
  incre.uploadDir(uploadDir, {
    cdnpath : incre.config.cdnpath,
    cdncsspath : incre.config.cdncsspath,
    path_prefix : incre.config.path_prefix,
    csspath_prefix : incre.config.csspath_prefix,
    pathmap : incre.config.pathmap,
    filePathMap : getFilePathMap()
  }, function(){
    console.log('  Info : upload done'.green);
  });
}

function markdown(){
  var pre = '<!DOCTYPE html><html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><link href="http://mat1.gtimg.com/www/mb/css/lib/markdown_140826a.css" media="all" rel="stylesheet" type="text/css" /></head><body><div id="content-container" class="markdown-body"></div><textarea id="content-source" style="display:none">',
      end = '</textarea> <script src="http://mat1.gtimg.com/www/mb/js/lib/marked_131018.js"></script> <script> marked.setOptions({breaks : true,highlight : function(code, lang) { return lang ? hljs.highlight(lang, code).value : hljs.highlightAuto(code).value; }});document.getElementById(\'content-container\').innerHTML = marked(document.getElementById(\'content-source\').value);</script> </body> </html>',
      defer = incre.gear.q.defer();

  var mds = incre.config.markdown;
  var htmlRoot = incre.config.base + '.incre/md2html/';

  function exec(){
    var md = mds.shift();
    if(!md){
      defer.resolve(true);
    }
    else{
      var val = incre.config.base + md;
      incre.fs.readFile(val).done(function(data){
        data = pre + data + end;
        var file = htmlRoot + md + '.html';
        incre.fs.writeFile(file, data, function(err){
          if(err){
            console.log(('  Error : write incre file ' + file + 'failed!').red);
          }
          else{
            console.log('  Info : write incre file ' + file + ' success.');
          }
        }, incre.config.base);

        exec();
      }, function(err){
        defer.reject(err);
      });
    }
  }

  exec();

  return defer.promise;
}

//clear process
function clear(){
  var uploadDir = incre.config.base + '.incre/upload/';
  console.log('  Info : start clearing'.green);
  incre.fs.clearDirSync(uploadDir, function(file){
    console.log('  Info : remove ' + file + ' success.');
  });
  console.log('  Info : clear done'.green);
}

incre.commander.command({
  cmd : 'init',
  description : 'init incre config file',
  handler : function(){
    var exist = fs.existsSync('./.incre');
    if(exist){
      incre.commander.read(' incre config files was existed, override ? (Y/N)', function(data){
        if(data.toLowerCase() == 'y'){
          initConfig();
          console.log((' Override incre config in ' + path.resolve('./.incre')).cyan);
        }
      });
    }
    else{
      initConfig();

      console.log(' Info : Initialized incre config in ' + path.resolve('./.incre'));
    }
  }
});

incre.commander.command({
  cmd : 'build',
  description : 'build to generate incre files',
  handler : function(){
    build();
  }
});

incre.commander.command({
  cmd : 'upload',
  description : 'upload incre files to cdn',
  handler : function(){
    upload();
  }
});

incre.commander.command({
  cmd : 'markdown',
  description : 'turn markdown file to html file',
  handler : function(){
    markdown();
  }
});

incre.commander.command({
  cmd : 'clear',
  description : 'clear incre temp files',
  handler : function(){
    clear();
  }
});

incre.commander.command({
  cmd : 'compare',
  description : 'generate incre base two files',
  //description : '-f1 file1\t -f2 file2',
  handler : function(parse){
    if(!parse.f1 && !parse.f2){
      console.log('  Warning : has no f1 and f2 options! use command "incre  compare -f1 file1 -f2 file2"'.yellow);
      return;
    }
    else{
      if(!parse.f1){
        console.log('  Warning : has no f1 option! use command "incre  compare -f1 file1 -f2 file2"'.yellow);
        return;
      }
      else if(!parse.f2){
        console.log('  Warning : has no f2 option! use command "incre  compare -f1 file1 -f2 file2"'.yellow);
        return;
      }
    }
    var file1 = parse.f1[0], file2 = parse.f2[0];
    if(file1 && file2){
      getincre(file2, file1);
    }
  }
});

incre.commander.version(projConf.version);

var config = checkConfig();
if(!process.argv[2]){//incre help
  incre.commander.run(['-h']);
}
else if(process.argv[2] == '-v'){//incre version
  incre.commander.run(['-v']);
}
else if(process.argv[2] == 'init'){//incre init
  incre.commander.run(['init']);
}
else{
  if(config){//有配置
    incre.config = require(path.join(config, 'increfile.js'));
    incre.commander.run();
  }
  else{//无配置
    console.log('  Error : Unalbe to find .incre config directory.'.red);
    console.log('');
    console.log('  If you\'re seeing this message, type "incre init" to initialize your project.');
  }
}