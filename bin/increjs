#!/usr/bin/env node
'use strict'
var fs = require('fs');
var path = require('path');
var cleancss = require('clean-css');
var jsmin = require('jsmin2');
var jsugly = require('uglify-js');
var colors = require('colors');
var requirejs = require('requirejs');
var projConf = require('../package.json');
var cp = require('child_process');

//colors
//bold italic underline inverse 
//yellow cyan white magenta green
//red grey blue rainbow zebra random

//cmd
//incre 显示帮助信息
//incre init 在当前路径下创建".incre"目录，存放临时文件和配置文件(increfile.js)
//incre build 根据配置文件(increfile.js)生成增量文件，打印增量信息
//incre upload 上传增量文件
//incre compare -f1 -f2 比较文件f1与文件f2生成增量文件
//incre gaga/incre build -uin=main.css 雪碧图将存储在incre.config.upload.cdncssimgpath + incre.config.upload.project + '/sprite'上
//
//build之前需要jsmin，再和线上的文件对比。jsuglify可能会影响增量文件的计算
//upload过程提供接口供用户自己实现
//build模版时，需要处理模版依赖的样式文件（为单独文件，不写在模板html中）
var incre = module.exports = require('../index.js');
var configfile;
var dupliMap = {};

function initConfig(){
  var base = './';
  incre.fs.mkdir('.incre', base);
  incre.fs.mkdir('upload', base + '.incre/');//待上传的文件临时目录
  incre.fs.mkdir('tmpl', base + '.incre/');//存放模板的目录
  incre.fs.mkdir('md2html', base + '.incre/');//markdown文件转成html文件之后，存放的目录

  var file = 'increfile.js';
  var defaultConfig = fs.createReadStream(path.join(incre.root, 'sample/'+file));
  var targetConfig = fs.createWriteStream(path.join('./.incre/', file));
  defaultConfig.pipe(targetConfig, {
    flags : 'w',
    encoding : 'utf-8',
    mode : '755'
  });

  var npfile = './.incre/nproxy.js';
  var npTmpl = [
    'module.exports = [\n',
      '\t// nproxy配置文件，详情请看https://github.com/goddyZhao/nproxy\n',
      '\t\n',
    '];'
  ].join('');
  fs.writeFile(npfile, npTmpl, function(err){
    if(err){
      console.log(('  Error : ' + err).red);
    }
  });
}

function checkConfig(){
  var commandDir = path.resolve('./').split(path.sep);
  var curDir;
  while(commandDir.length > 1){//从当前目录向上寻找incre配置目录
    curDir = path.join(commandDir.join(path.sep), '/.incre');
    if(fs.existsSync(curDir)){
      return curDir;
    }
    commandDir.pop();
  }
  return false;
}

//文件名:文件路径map
function getFilePathMap(){
  var filePathMap = {};
  incre.gear._.each(incre.config.src, function(v, k){
    k = duplicate1(k);
    var fileInfo = k.split('/');
    var fileName = fileInfo[fileInfo.length - 1];
    var filePath = k.replace(fileName, '');
    if(!incre.config.pathmap[filePath] && incre.config.upload.project){
      filePath = incre.config.upload.project + '/' + filePath;
    }
    filePathMap[fileName] = filePath;
  });
  return filePathMap;
}

// 对重复文件名做处理（copy to upload dir）
// tar - 目标文件路径
function duplicate(tar){
  var newname = tar;
  if(!dupliMap[newname]){
    dupliMap[newname] = 1;
  }
  else{
    var ext = path.extname(tar);
    var base = tar.replace(ext, '');
    newname = base + '_' + dupliMap[newname] + ext;
    dupliMap[tar]++;
  }
  return newname;
}

// 对重复文件名做处理（getFilePathMap）
function duplicate1(src){
  var newsrc = src;
  var ext = path.extname(src);
  var fileInfo = src.split('/');
  var fileName = fileInfo[fileInfo.length - 1];
  var srcPath = src.replace(fileName, '');
  var basename = path.basename(src).replace(ext, '');

  src = fileName;

  if(!dupliMap[src]){
    dupliMap[src] = 1;
  }
  else{
    newsrc = srcPath + basename + '_' + dupliMap[src] + ext;
    dupliMap[src]++;
  }
  return newsrc;
}

function addZero(v){
  v = v.toString();
  if(v.length == 1){
    v = '0' + v;
  }
  return v;
}

function printLogInfo(logInfo){
  console.log('');
  console.log('  file list:'.green);
  console.log('  file\t\ttotal\t\tsaving'.cyan);
  incre.gear._.each(logInfo, function(v, k){
    if(v.status == 'ok'){
      console.log(('  ' + k + '\t\t' + v.total + '\t\t' + v.saving).grey);
    }
    else if(v.status == 'error'){
      console.log(('  ' + k + '\t\tfail to generate file').red);
    }
  });
  console.log('');
}

//compare
//工具类，快速计算两个文件的增量部分
function getincre(newfile, oldfile){
  var uploadDir = incre.config.base + '.incre/upload/';
  var newfileInfo = newfile.split('/');
  var oldfileInfo = oldfile.split('/');
  var increfileName = oldfileInfo[oldfileInfo.length - 1].replace('.js', '_') + newfileInfo[newfileInfo.length - 1];
  var increfile = uploadDir + increfileName;
  incre.fs.readFile(newfile).done(function(data){
    var newcode = data;

    incre.fs.readFile(oldfile).done(function(data1){
      var oldcode = data1;

      var increObj = incre.makeincre(oldcode, newcode, incre.config.chunk || 20);
      increObj.saving = newcode.length - JSON.stringify(increObj).length;//节省请求的字符数
      increObj.total = newcode.length;//全量字符数
      var increcode = 'increCallback_' + parseInt( new Date().getTime()) + '=' + JSON.stringify(increObj);

      fs.writeFile(increfile, increcode, function(err){
        if(err){
          console.log(('  Error : write incre file ' + increfileName + 'failed!').red);
        }
        else{
          console.log('  Info : write incre file ' + increfileName + ' success.');
        }
      });
    }, function(err){
      console.log(('  Error : ' + err).red);
    });
    
  });
}

function merge(){
  var res = {};
  var defer = incre.gear.q.defer();

  var keys = incre.gear._.keys(incre.config.merge);

  function get(){
    var key = keys.shift();
    if(!key){
      defer.resolve(res);
    }
    else{
      var val = incre.config.merge[key];
      val = incre.gear._.map(val, function(item){
        return incre.config.base + item;
      });

      incre.fs.readFiles(val).done(function(datas){
        res[key] = datas;
        get();
      }, function(err){
        defer.reject(err);
      });  
    }
  }

  get();

  return defer.promise;
}

var Template = (function(){
  var tmplDir = '';

  /**
   * 读取incre.config.template[key]中的模板，然后build，最后写入文件中
   * @param  {array} tmplsKeys 模板对象中的key
   * @param  {object} tmpls     模板对象
   * @param  {string} tmplRoot  模板源文件目录
   * @param  {string} tmplKey       模板项目名
   * @return {[type]}           [description]
   */
  function action(tmplsKeys, tmpls, tmplRoot, tmplKey){
     var defer = incre.gear.q.defer();

     function exec(){
      var key = tmplsKeys.shift();
      if(!key){
        defer.resolve(true);
      }
      else{
        var val = tmplRoot + tmpls[key];
        incre.fs.readFile(val).done(function(data){
          var code = '', file = '';
          if(val.indexOf('.css') != -1){//css文件
            code = ["define('css/", key, "','", new cleancss({
              noAdvanced : true,
              compatibility : true
            }).minify(data) , "');"].join('');
            file = tmplDir + tmplKey + '/' + key + '.css.js';
          }
          else{//html文件
            code = ["define('tmpl/", key, "','", incre.htmlmin(data) , "');"].join('');
            file = tmplDir + tmplKey + '/' + key + '.js';
          }
          incre.fs.writeFile(file, code, function(err){
            if(err){
              console.log(('  Error : write tmplate file ' + file + ' failed!').red);
            }
            else{
              console.log(('  Info : write tmplate file ' + file + ' success.').green);
            }
          }, incre.config.base);

          exec();
        }, function(err){
          defer.reject(err);
        });
      }
     }

     exec();

     return defer.promise;
  }

  function build(){
    var root = incre.config.base + incre.config.template.root;
    delete incre.config.template.root;

    var keys = incre.gear._.keys(incre.config.template);

    tmplDir = incre.config.base + '.incre/tmpl/';

    function exec(){
      var key = keys.shift();
      if(!key){
        return;
      }
      else{
        var tmplRoot = root + key + '/';
        var tmpls = incre.config.template[key];
        var tmplsKeys = incre.gear._.keys(tmpls);

        action(tmplsKeys, tmpls, tmplRoot, key).done(function(res){
          if(res){
            exec();
          }
        });
      }
    }

    exec();
  }

  function isenable(){
    return !!(incre.config.template && incre.config.template.root);
  }

  return {
    build : build,
    isenable : isenable
  };
}());

// build process
// @param imgcss 包含图片的css文件数组
var build = (function(){
  var d = new Date();
  var ver = d.getFullYear().toString().slice(2) + addZero(d.getMonth() + 1) + addZero(d.getDate());
  var CONST_VERS = {
    NOINCRE : '',//不生成增量文件
    NOVER : '-',//不进行版本控制，上传时覆盖老的文件
    NOMIN : '~'//不进行js混淆压缩
  }

  // 将import文件替换为实际代码
  function importcss(data){
    data = data.replace(/@import\s+url\(['"]?([\d\w_\\-\\.\/]*).*\);/g, function(match, group, str){
      return fs.readFileSync(incre.config.gaga.root + group);
    });
    return data;
  }

  function gendist(cfg){
    var tmpfile = cfg.tmpfile,
        newcode = cfg.newcode,
        newfileName = cfg.newfileName,
        v = cfg.v,
        k = cfg.k,
        newfileInfo = cfg.newfileInfo,
        uploadDir = cfg.uploadDir,
        logInfo = cfg.logInfo;

    tmpfile = duplicate(tmpfile, k);
    fs.writeFile(tmpfile, newcode, function(err){
      if(err){
        console.log(('  Error : write file ' + tmpfile + ' failed!').red);
      }
      else{
        console.log(('  Info : write file ' + tmpfile + ' success.').green);
      }
    });

    if([CONST_VERS.NOINCRE, CONST_VERS.NOVER, CONST_VERS.NOMIN].indexOf(v.trim()) == -1){//全量版本号存在时， ""和"-"的含义请查看sample/increfile.js
      //计算增量文件
      var cdnfile = incre.config.upload.cdnpath + k.replace('.js', '_' + v + '.js');
      var jsKey = k.replace('.js', '');
      var logObj = {};
      incre.fs.readFile(cdnfile).done(function(data1){
        var oldcode = data1;

        var increObj = incre.makeincre(oldcode, newcode, incre.config.chunk || 20);
        increObj.saving = newcode.length - JSON.stringify(increObj).length;//节省请求的字符数
        increObj.total = newcode.length;//全量字符数
        var increcode = 'increCallback_' + jsKey.replace(/\//g, '_') + '=' + JSON.stringify(increObj);

        //写增量文件
        var increfileName = newfileInfo[newfileInfo.length - 1].replace('.js', '_' + v + '_$.js');
        var increfile = uploadDir + increfileName;

        fs.writeFile(increfile, increcode, function(err){
          if(err){
            logObj[jsKey] = {
              status : 'error'
            };
            incre.gear.listen.set(logInfo, logObj);
            console.log(('  Error : write incre file ' + increfileName + 'failed!').red);
          }
          else{
            logObj[jsKey] = {
              status : 'ok',
              total : increObj.total,
              saving : increObj.saving
            };
            incre.gear.listen.set(logInfo, logObj);
            console.log('  Info : write incre file ' + increfileName + ' success.');
          }
        });
      }, function(err){
        console.log(('  Error : ' + err).red);
        logObj[jsKey] = {
          status : 'error'
        }
        incre.gear.listen.set(logInfo, logObj);
      });
    }
  }

  // 将中文转为unicode编码
  function dec2hex(codes){
    var res = '';
    res = codes.replace(/[\u4e00-\u9fa5]/g, function(match, group, str){
      var hex = '\\u' + ("00"+match.charCodeAt(0).toString(16)).slice(-4);
      return hex;
    });

    return res;
  }

  function jscompile(data, opt){
    var code = jsmin(data).code;// jsmin
    code = jsugly.minify(code, opt).code;// jsugly

    // cp.exec()

    return code;
  }

  return function(imgcss){
    var uploadDir = incre.config.base + '.incre/upload/';
    var logInfo = incre.gear.listen.add({}, function(logs){
      if(incre.gear.jsonsize(logs) == incre.gear.jsonsize(incre.config.src)){
        printLogInfo(logs);
      }
    });
    clear();

    merge().done(function(mergeCodes){
      //build js/css
      var keys = [];
      for(var k in incre.config.src){
        keys.push(k);
      }

      function action1(){
        var k = keys.shift();

        if(!k){
          if(incre.config.rjs && incre.config.rjs.enable){
            requirejs.optimize(incre.config.rjs, function(res){
              console.log(res);
            });
          }
          //build template
          if(Template.isenable()){
            Template.build();
          }
          return;
        }

        var v = incre.config.src[k];

        var newfile = incre.config.base + k;
        (function(newfile, v, k){
          incre.fs.readFile(newfile, true).done(function(data){
            var newcode = data;
            if(data && !mergeCodes[k]){//区分js和css && 非合并文件
              if(newfile.indexOf('.js') != -1 && v != CONST_VERS.NOMIN){//版本号为“～”的文件不进行混淆压缩
                newcode = jscompile(data, incre.gear._.extend({fromString:true}, incre.config.jsugly || {}));
              }
              else if(newfile.indexOf('.css') != -1){
                data = importcss(data);
                newcode = new cleancss({
                  noAdvanced : true,
                  compatibility : true
                }).minify(data);
              }
            }
            else{
              if(mergeCodes[k] && mergeCodes[k].length > 0){//合并文件
                newcode = mergeCodes[k].join('\n');
                newcode = jscompile(newcode, {fromString:true});
              }
            }
            
            //写全量文件
            var newfileInfo = newfile.split('/');
            var newfileName = (v == '-' ? newfileInfo[newfileInfo.length - 1] : newfileInfo[newfileInfo.length - 1].replace(/(\.(js|css))$/, '_' + ver + '$1'));
            var tmpfile = uploadDir + newfileName;

            newcode = dec2hex(newcode);

            var cfg = {
              tmpfile : tmpfile,
              newcode : newcode,
              newfileName : newfileName,
              v : v,
              k : k,
              newfileInfo : newfileInfo,
              uploadDir : uploadDir,
              logInfo : logInfo
            };

            //如果是样式文件，在minify之后，再处理sprite图片
            if(newfile.indexOf('.css') != -1){
              newcode = incre.gaga.replace2x(newcode, newfile);
              if(incre.gaga){
                incre.gaga.cssprite(k, imgcss, function(verObj){
                  incre.gear._.each(verObj, function(v1, k1){//cssgaga 不能再设置sprite新文件名
                    var regexp = new RegExp(k1.replace(/\./g, '\.'), 'g');
                    var ext = path.extname(k1);
                    var replacement = [k1.replace(ext, ''), (v1 == CONST_VERS.NOVER ? '' : ('_' + v1)), ext].join('');// 如果没有版本控制，需要改变雪碧图文件名
                    newcode = newcode.replace(regexp, replacement);
                  });
                  cfg.newcode = newcode;
                  gendist(cfg);
                  action1();
                }, function(){
                  gendist(cfg);
                  action1();
                }, {
                  fpMap : getFilePathMap(),
                  ver : ver
                });
              }
              else{
                gendist(cfg);
                action1();
              }
            }
            else{
              gendist(cfg);
              action1();
            }
          });
        }(newfile, v, k));
      }
      action1();
    });

    console.log('  Info : start building js, css and template'.green);
  }
}());

//upload process
function upload(opt){
  if(!incre.uploadFun){
    console.log('  Warning : you do not implement "post" function to communicate with your upload cgi.You can check this link https://github.com/aslinwang/increjs/issues/1'.yellow);
    return;
  }
  var uploadDir = incre.config.base + '.incre/upload/';
  if(opt == -1){//查看上传列表
    incre.uploader.listDir(uploadDir, {
      filePathMap : getFilePathMap()
    });
  }
  else{
    console.log('  Info : start uploading'.green);
    incre.uploader.uploadDir(uploadDir, opt.split(','), incre.gear._.extend(incre.config, {
      cdnpath : incre.config.upload.cdnpath,
      cdncsspath : incre.config.upload.cdncsspath,
      pathmap : incre.config.pathmap,
      filePathMap : getFilePathMap()
    }), function(){
      console.log('  Info : upload done'.green);
    });
  }
}

//clear process
function clear(){
  var uploadDir = incre.config.base + '.incre/upload/';
  console.log('  Info : start clearing'.green);
  incre.fs.clearDirSync(uploadDir, function(file){
    console.log('  Info : remove ' + file + ' success.');
  });
  console.log('  Info : clear done'.green);
}

incre.commander.command({
  cmd : 'init',
  description : 'init incre config file',
  handler : function(){
    var exist = fs.existsSync('./.incre');
    if(exist){
      incre.commander.read(' incre config files was existed, override ? (Y/N)', function(data){
        if(data.toLowerCase() == 'y'){
          initConfig();
          console.log((' Override incre config in ' + path.resolve('./.incre')).cyan);
        }
      });
    }
    else{
      initConfig();

      console.log(' Info : Initialized incre config in ' + path.resolve('./.incre'));
    }
  }
});

incre.commander.command({
  cmd : 'build',//incre build -uic=main.css,test.css //update image in css
  description : 'build to generate incre files',
  handler : function(){
    var opt = process.argv[3];

    if(opt && opt.indexOf('-uic') != -1){//有参数
      opt = opt.replace(/^-uic=/, '');
      opt = opt.split(',');
      build(opt);
    }
    else{
      build();
    }
  }
});

incre.commander.command({
  cmd : 'upload',
  description : 'upload incre files to cdn',
  handler : function(){
    var opt = process.argv[3];

    if(opt){
      if(opt == '-l'){//incre upload -l - 查看待上传的文件
        upload(-1);
      }
      else if(opt == '-c'){//incre upload -c 清空本地上传目录
        incre.uploader.clear();
      }
      else{//incre upload 1,2,3,4... or incre upload 0
        upload(opt);
      }
    }
    else{
      console.log('  Warning : option required'.yellow);
    }
  }
});

incre.commander.command({
  cmd : 'clear',
  description : 'clear incre temp files',
  handler : function(){
    clear();
  }
});

incre.commander.command({
  cmd : 'compare',
  description : 'generate incre base two files',
  //description : '-f1 file1\t -f2 file2',
  handler : function(parse){
    if(!parse.f1 && !parse.f2){
      console.log('  Warning : has no f1 and f2 options! use command "incre  compare -f1 file1 -f2 file2"'.yellow);
      return;
    }
    else{
      if(!parse.f1){
        console.log('  Warning : has no f1 option! use command "incre  compare -f1 file1 -f2 file2"'.yellow);
        return;
      }
      else if(!parse.f2){
        console.log('  Warning : has no f2 option! use command "incre  compare -f1 file1 -f2 file2"'.yellow);
        return;
      }
    }
    var file1 = parse.f1[0], file2 = parse.f2[0];
    if(file1 && file2){
      getincre(file2, file1);
    }
  }
});

incre.commander.version(projConf.version);

var configfile = checkConfig();

if(process.argv[process.argv.length - 1] == '-d'){//debug mode
  var oldspawn = cp.spawn;
  var mySpawn = function(){
    console.log('spawn called');
    console.log(arguments);
    var result = oldspawn.apply(this, arguments);
    return result;
  }
  cp.spawn = mySpawn;
}

if(!process.argv[2]){//incre help
  incre.commander.run(['-h']);
}
else if(process.argv[2] == '-v'){//incre version
  incre.commander.run(['-v']);
}
else if(process.argv[2] == 'init'){//incre init
  incre.commander.run(['init']);
}
else{
  if(configfile){//有配置
    incre.config = require(path.join(configfile, 'increfile.js'));
    incre.config.upload = incre.config.upload || {};
    incre.CONFIG = {};//因为配置结构设计，将某些配置存在内存中

    incre.uploader.init(incre);

    incre.commander.run();
  }
  else{//无配置
    console.log('  Error : Unalbe to find .incre config directory.'.red);
    console.log('');
    console.log('  If you\'re seeing this message, type "incre init" to initialize your project.');
  }
}
